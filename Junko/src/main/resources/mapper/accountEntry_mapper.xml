<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.junko.accountEntry.AccountEntryDAO">
	
	<select id="accountList" resultType="kr.co.junko.dto.AccountingEntryDTO">
		SELECT entry_idx 
		,account_idx
		,entry_type
		,amount
		,entry_date 
		,custom_idx
        ,sales_idx
		FROM accountingEntry
		WHERE del_yn = false
		ORDER BY entry_idx DESC
		LIMIT #{limit} OFFSET #{offset}
		
	</select>
	
	<select id="pages" resultType="int">
		SELECT CEIL(COUNT(entry_idx)/#{param1}) AS pages FROM accountingEntry
	</select>
	
	
	<select id="accountListSearch" parameterType="kr.co.junko.dto.AccountingEntrySearchDTO" resultType="kr.co.junko.dto.AccountingEntryDTO">
	SELECT * 
	FROM accountingEntry 
	WHERE del_yn = false
	<if test="status != null and status != ''">
		AND status = #{status}
	</if>
	<if test="user_id != null and user_id != ''">
		AND user_id = #{user_id}
	</if>
	<if test="keyword != null and keyword != ''">
		AND (title LIKE CONCAT('%', #{keyword}, '%') OR content LIKE CONCAT('%', #{keyword}, '%'))
	</if>
	<if test="start_date != null">
		AND reg_date &gt;= #{start_date}
	</if>
	<if test="end_date != null">
		AND reg_date &lt;= #{end_date}
	</if>
	<choose>
		<when test="orderBy != null and orderDir != null">
			ORDER BY ${orderBy} ${orderDir}
		</when>
		<otherwise>
			ORDER BY reg_date DESC
		</otherwise>
	</choose>
	LIMIT #{limit} OFFSET #{page}
</select>

<select id="accountListSearchCount" parameterType="kr.co.junko.dto.AccountingEntrySearchDTO" resultType="int">
	SELECT COUNT(*)
	FROM accountingEntry
	WHERE del_yn = false
	<if test="status != null and status != ''">
		AND status = #{status}
	</if>
	<if test="user_id != null and user_id != ''">
		AND user_id = #{user_id}
	</if>
	<if test="keyword != null and keyword != ''">
		AND (title LIKE CONCAT('%', #{keyword}, '%') OR content LIKE CONCAT('%', #{keyword}, '%'))
	</if>
	<if test="start_date != null">
		AND reg_date &gt;= #{start_date}
	</if>
	<if test="end_date != null">
		AND reg_date &lt;= #{end_date}
	</if>
</select>
	
	
	<insert id="accountRegist" parameterType="kr.co.junko.dto.AccountingEntryDTO">
	INSERT INTO accountingEntry (account_idx, entry_type, amount, entry_date, custom_idx, sales_idx)
VALUES (#{account_idx}, #{entry_type}, #{amount}, #{entry_date}, #{custom_idx}, #{sales_idx})
	</insert>
	
	<select id="accountDetail" resultType="map">
  SELECT
    ae.entry_idx,
    ae.account_idx,
    ae.entry_type,
    ae.amount,
    ae.entry_date,
    ae.custom_idx,
    c.custom_name,
    ae.sales_idx,
    s.customer as customer_name,
    ae.user_idx,
    u.user_id,
    u.user_name,
     ae.status,
  ae.del_yn
  FROM
    accountingEntry ae
  LEFT JOIN custom c ON ae.custom_idx = c.custom_idx
  LEFT JOIN sales s ON ae.sales_idx = s.sales_idx
  LEFT JOIN user u ON ae.user_idx = u.user_idx
  WHERE ae.entry_idx = #{entry_idx}
</select>

	
	
	<update id="accountUpdate" parameterType="map">
    UPDATE accountingEntry SET 
        entry_type=#{dto.entry_type}, 
        amount=#{dto.amount}, 
        custom_idx=#{dto.custom_idx}, 
        sales_idx=#{dto.sales_idx}
    WHERE entry_idx=#{entry_idx}
</update>
	
	<delete id="accountDelete" parameterType="int">
	DELETE FROM accountingEntry WHERE entry_idx=#{entry_idx}
	</delete>
	
	
	<select id="getEntryWriterAndStatus" parameterType="int" resultType="map">
    SELECT 
      ae.user_idx, 
      u.user_id, 
      ae.status 
    FROM 
      accountingEntry ae
    LEFT JOIN user u ON ae.user_idx = u.user_idx
    WHERE 
      ae.entry_idx = #{entry_idx}
</select>

	
	<update id="accountStatusUpdate" parameterType="map">
    UPDATE accountingEntry SET status = #{status} WHERE entry_idx = #{entry_idx}
</update>

	
	<insert id="saveLog" parameterType="kr.co.junko.dto.AccountingEntryLogDTO">
    INSERT INTO accountingEntryLog
    (entry_idx, user_id, action, before_status, after_status, log_message, created_at)
    VALUES
    (#{entry_idx}, #{user_id}, #{action}, #{before_status}, #{after_status}, #{log_message}, #{created_at})
</insert>
	
	<insert id="accountFile" parameterType="kr.co.junko.dto.FileDTO">
    INSERT INTO file
    (ori_filename, new_filename, reg_date, type, idx, del_yn)
    VALUES
    (#{ori_filename}, #{new_filename}, #{reg_date}, #{type}, #{idx}, #{del_yn})
</insert>
	
	
	<select id="entryFileList" resultType="kr.co.junko.dto.FileDTO">
    SELECT *
    FROM file
    WHERE idx = #{entry_idx} AND type = 'accounting' AND del_yn = 0
    ORDER BY file_idx DESC
</select>
	
	<select id="entryFileDown" resultType="kr.co.junko.dto.FileDTO">
    SELECT *
    FROM file
    WHERE file_idx = #{file_idx}
</select>
	
	<select id="accountLog" resultType="kr.co.junko.dto.AccountingEntryLogDTO">
    SELECT 
        log_idx, entry_idx, user_id, action, before_status, after_status, log_message, created_at
    FROM 
        accountingEntryLog
    WHERE 
        entry_idx = #{entry_idx}
    ORDER BY 
        created_at DESC
</select>
	
	<insert id="accountPdf"
        parameterType="kr.co.junko.dto.FileDTO"
        useGeneratedKeys="true"
        keyProperty="file_idx">
    INSERT INTO file (
        ori_filename, new_filename, reg_date,
        type, idx, del_yn
    )
    VALUES (
        #{ori_filename}, #{new_filename}, #{reg_date},
        #{type}, #{idx}, #{del_yn}
    )
</insert>
	
	
</mapper>