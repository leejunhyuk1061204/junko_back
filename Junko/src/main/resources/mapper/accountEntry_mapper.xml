<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.junko.accountEntry.AccountEntryDAO">
	
	<select id="accountList" resultType="kr.co.junko.dto.AccountingEntryDTO">
	SELECT 
  ae.entry_idx, 
  ae.account_idx, 
  ae.entry_type, 
  ae.amount, 
  ae.entry_date, 
  ae.custom_idx, 
  ae.sales_idx,
  ae.status,  
  c.custom_name,
  s.customer AS customer_name,
  u.user_name,  
  u.user_id, 
  CASE 
    WHEN f.cnt > 0 THEN true
    ELSE false
  END AS has_file
FROM accountingEntry ae
LEFT JOIN custom c ON ae.custom_idx = c.custom_idx
LEFT JOIN sales s ON ae.sales_idx = s.sales_idx
LEFT JOIN user u ON ae.user_idx = u.user_idx 
LEFT JOIN (
    SELECT idx, COUNT(*) as cnt
    FROM file
    WHERE del_yn = 0 AND (type = 'accounting' OR type = 'pdf')
    GROUP BY idx
) f ON ae.entry_idx = f.idx
WHERE ae.del_yn = false
ORDER BY ae.entry_idx DESC
LIMIT #{limit} OFFSET #{offset}
	</select>
	<select id="pages" resultType="int">
		SELECT CEIL(COUNT(entry_idx)/#{param1}) AS pages FROM accountingEntry
	</select>
	
	<select id="accountTotalCount" resultType="int">
  SELECT COUNT(*) FROM accountingEntry WHERE del_yn = false
</select>
	
	
	<select id="findSalesIdxByName" parameterType="String" resultType="java.lang.Integer">
    SELECT sales_idx FROM sales
    WHERE customer = #{name}
    AND del_yn = 0
    LIMIT 1
</select>

<select id="findCustomIdxByName" parameterType="String" resultType="java.lang.Integer">
    SELECT custom_idx FROM custom
    WHERE custom_name = #{name}
    AND del_yn = 0
    LIMIT 1
</select>
	
	
	<update id="updateEntryStatus" parameterType="map">
    UPDATE accountingEntry SET status = #{status} WHERE entry_idx = #{entry_idx}
</update>

<select id="getUserIdByIdx" parameterType="int" resultType="String">
    SELECT user_id FROM user WHERE user_idx = #{user_idx}
</select>
	
	
	<select id="accountListSearch" parameterType="kr.co.junko.dto.AccountingEntrySearchDTO" resultType="kr.co.junko.dto.AccountingEntryDTO">
	SELECT ae.*,ae.status,  c.custom_name, s.customer AS customer_name,u.user_name
	FROM accountingEntry ae
	LEFT JOIN custom c ON ae.custom_idx = c.custom_idx
	LEFT JOIN sales s ON ae.sales_idx = s.sales_idx
	LEFT JOIN user u ON ae.user_idx = u.user_idx
	WHERE ae.del_yn = false

	<if test="keyword != null and keyword != ''">
		AND (
			ae.entry_type LIKE CONCAT('%', #{keyword}, '%')
			OR c.custom_name LIKE CONCAT('%', #{keyword}, '%')
			OR s.customer LIKE CONCAT('%', #{keyword}, '%')
		)
	</if>
<if test="custom_name != null and custom_name != ''">
  AND c.custom_name LIKE CONCAT('%', #{custom_name}, '%')
</if>

<if test="customer_name != null and customer_name != ''">
  AND s.customer LIKE CONCAT('%', #{customer_name}, '%')
</if>
	<if test="startDate != null">
	AND ae.entry_date &gt;= #{startDate}
</if>
<if test="endDate != null">
	AND ae.entry_date &lt;= #{endDate}
</if>
<if test="entry_type != null and entry_type != ''">
  AND ae.entry_type = #{entry_type}
</if>

<if test="status != null and status != ''">
  AND ae.status = #{status}
</if>
	ORDER BY ae.entry_date DESC
	LIMIT #{limit} OFFSET #{page}
</select>

<select id="accountListSearchCount" parameterType="kr.co.junko.dto.AccountingEntrySearchDTO" resultType="int">
  SELECT COUNT(*)
  FROM accountingEntry ae
  LEFT JOIN custom c ON ae.custom_idx = c.custom_idx
  LEFT JOIN sales s ON ae.sales_idx = s.sales_idx
  WHERE ae.del_yn = false

  <if test="custom_name != null and custom_name != ''">
  AND c.custom_name LIKE CONCAT('%', #{custom_name}, '%')
</if>

<if test="customer_name != null and customer_name != ''">
  AND s.customer LIKE CONCAT('%', #{customer_name}, '%')
</if>
  <if test="startDate != null">
	AND ae.entry_date &gt;= #{startDate}
</if>
<if test="endDate != null">
	AND ae.entry_date &lt;= #{endDate}
</if>
</select>
	
	
<insert id="accountRegist" parameterType="kr.co.junko.dto.AccountingEntryDTO"
        useGeneratedKeys="true"
        keyProperty="entry_idx">
    INSERT INTO accountingEntry (
        account_idx, entry_type, amount, entry_date, custom_idx, sales_idx, user_idx
    ) VALUES (
        #{account_idx}, #{entry_type}, #{amount}, #{entry_date}, #{custom_idx}, #{sales_idx}, #{user_idx}
    )
</insert>

	
	<select id="accountDetail" resultType="map">
  SELECT
    ae.entry_idx,
    ae.account_idx,
    ae.entry_type,
    ae.amount,
    ae.entry_date,
    ae.custom_idx,
    c.custom_name,
    ae.sales_idx,
    s.customer as customer_name,
    ae.user_idx,
    u.user_id,
    u.user_name,
     ae.status,
  ae.del_yn
  FROM
    accountingEntry ae
  LEFT JOIN custom c ON ae.custom_idx = c.custom_idx
  LEFT JOIN sales s ON ae.sales_idx = s.sales_idx
  LEFT JOIN user u ON ae.user_idx = u.user_idx
  WHERE ae.entry_idx = #{entry_idx}
</select>

	
	
	<update id="accountUpdate" parameterType="map">
    UPDATE accountingEntry SET 
        entry_type=#{dto.entry_type}, 
        amount=#{dto.amount}, 
        custom_idx=#{dto.custom_idx}, 
        sales_idx=#{dto.sales_idx}
    WHERE entry_idx=#{entry_idx}
</update>
	
	<delete id="accountDelete" parameterType="int">
	DELETE FROM accountingEntry WHERE entry_idx=#{entry_idx}
	</delete>
	
	<delete id="deletePdfPhysicallyByEntryIdx" parameterType="int">
    DELETE FROM file
    WHERE idx = #{entry_idx} AND type = 'pdf'
</delete>

	<update id="deletePdfByEntryIdx" parameterType="int">
  UPDATE file
  SET del_yn = 1
  WHERE idx = #{entry_idx} AND type = 'pdf'
</update>
	
	<select id="getPdfFileByEntryIdx" parameterType="int" resultType="kr.co.junko.dto.FileDTO">
  SELECT * FROM file
  WHERE idx = #{entry_idx} AND type = 'pdf' AND del_yn = 0
</select>

	<select id="getEntryWriterAndStatus" parameterType="int" resultType="map">
    SELECT 
      ae.user_idx, 
      u.user_id, 
      ae.status 
    FROM 
      accountingEntry ae
    LEFT JOIN user u ON ae.user_idx = u.user_idx
    WHERE 
      ae.entry_idx = #{entry_idx}
</select>

	
	<update id="accountStatusUpdate" parameterType="map">
    UPDATE accountingEntry SET status = #{status} WHERE entry_idx = #{entry_idx}
</update>

	
	<insert id="saveLog" parameterType="kr.co.junko.dto.AccountingEntryLogDTO">
    INSERT INTO accountingEntryLog
    (entry_idx, user_id, action, before_status, after_status, log_message, created_at)
    VALUES
    (#{entry_idx}, #{user_id}, #{action}, #{before_status}, #{after_status}, #{log_message}, #{created_at})
</insert>
	
	<insert id="accountFile" parameterType="kr.co.junko.dto.FileDTO">
    INSERT INTO file
    (ori_filename, new_filename, reg_date, type, idx, del_yn)
    VALUES
    (#{ori_filename}, #{new_filename}, #{reg_date}, #{type}, #{idx}, #{del_yn})
</insert>
	
	
	<select id="entryFileList" resultType="kr.co.junko.dto.FileDTO">
    SELECT *
FROM file
WHERE idx = #{entry_idx} 
  AND del_yn = 0 
  AND (type = 'accounting' OR type = 'pdf')
ORDER BY file_idx DESC

</select>
	
	<select id="entryFileDown" resultType="kr.co.junko.dto.FileDTO">
    SELECT *
    FROM file
    WHERE file_idx = #{file_idx}
</select>
	
	<select id="accountLog" resultType="kr.co.junko.dto.AccountingEntryLogDTO">
    SELECT 
        log_idx, entry_idx, user_id, action, before_status, after_status, log_message, created_at
    FROM 
        accountingEntryLog
    WHERE 
        entry_idx = #{entry_idx}
    ORDER BY 
        created_at DESC
</select>
	
	<insert id="accountPdf"
        parameterType="kr.co.junko.dto.FileDTO"
        useGeneratedKeys="true"
        keyProperty="file_idx">
    INSERT INTO file (
        ori_filename, new_filename, reg_date,
        type, idx, del_yn
    )
    VALUES (
        #{ori_filename}, #{new_filename}, #{reg_date},
        #{type}, #{idx}, #{del_yn}
    )
</insert>
	
	
</mapper>