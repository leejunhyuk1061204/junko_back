<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.junko.msg.MsgDAO">

	<insert id="msgSend" parameterType="kr.co.junko.dto.MsgDTO">
		INSERT INTO msg (sender_idx, receiver_idx, msg_title, msg_content
		<if test="important_yn != null and important_yn != ''and important_yn != 0">
			,important_yn
		</if>
		) 
			VALUES (#{sender_idx}, #{receiver_idx}, #{msg_title}, #{msg_content}
			<if test="important_yn != null and important_yn != ''and important_yn != 0">
			,#{important_yn}
		</if>
			)
	</insert>
	
	<update id="oldMsgDel">
		UPDATE msg
		SET del_yn = 1
		WHERE del_yn = 0
			AND DATEDIFF(NOW(), sent_at) >= 30
	</update>
	
	<select id="msgReceived" parameterType="int" resultType="kr.co.junko.dto.MsgDTO">
		SELECT * from msg
		WHERE receiver_idx = #{user_idx}
		    AND receiver_del = 0
    		AND del_yn = 0
   		ORDER BY sent_at DESC
	</select>
	
	<select id="msgSent" parameterType="int" resultType="kr.co.junko.dto.MsgDTO">
		SELECT * from msg
		WHERE sender_idx = #{user_idx}
			AND sender_del = 0
    		AND del_yn = 0
		ORDER BY sent_at DESC
	</select>
	
	<update id="senderDel">
	  UPDATE msg
	  SET sender_del = 1
	  WHERE msg_idx = #{msg_idx} AND sender_idx = #{sender_idx}
	</update>
	
	<update id="receiverDel">
	  UPDATE msg
	  SET receiver_del = 1
	  WHERE msg_idx = #{msg_idx} 
	  	AND receiver_idx = #{receiver_idx}
	</update>
	
	<update id="msgRead">
		UPDATE msg
		SET read_yn = 1
		WHERE msg_idx = #{msg_idx}
			AND read_yn = 0
	</update>
	
	<select id="userAuto" resultType="map" parameterType="string">
		SELECT
			u.user_idx, 
    		CONCAT(d.dept_name, ' ', u.user_name, ' ', j.job_name) AS label FROM user u
		JOIN dept d ON u.dept_idx = d.dept_idx
		JOIN job j ON u.job_idx = j.job_idx
		WHERE u.status = '재직'
			AND (
				      u.user_name LIKE CONCAT('%', #{keyword}, '%')
				      OR d.dept_name LIKE CONCAT('%', #{keyword}, '%')
				      OR j.job_name LIKE CONCAT('%', #{keyword}, '%')
					)
	</select>
	
	<update id="yImportant">
		UPDATE msg
		SET important_yn = 1
		WHERE msg_idx = #{msg_idx} AND sender_idx = #{user_idx}
	</update>
	
	<update id="nImportant">
		UPDATE msg
		SET important_yn = 0
		WHERE msg_idx = #{msg_idx} AND sender_idx = #{user_idx}
	</update>
	
	<select id="msgImportantView" parameterType="int" resultType="kr.co.junko.dto.MsgDTO">
	    SELECT * FROM msg
	    WHERE sender_idx = #{user_idx}
	      AND sender_del = 0
	      AND important_yn = 1
   		  AND del_yn = 0
	    ORDER BY sent_at DESC
	</select>
	
	<select id="msgUnreadCnt" parameterType="int" resultType="int">
	  SELECT COUNT(*) FROM msg
	  WHERE receiver_idx = #{user_idx}
	    AND read_yn = 0
	    AND receiver_del = 0
	    AND del_yn = 0
	</select>
	
	<select id="msgSendList" parameterType="map" resultType="map">
		select
			m.*,
			u.user_name as sender_name,
			u2.user_name as receiver_name
		from msg m
			join `user` u on m.sender_idx = u.user_idx
			join `user` u2 on m.receiver_idx = u2.user_idx
		<where>
			m.sender_del = false
			and m.sender_idx = #{user_idx}
			<if test="important_yn != null and important_yn !=''">
				and m.important_yn = #{important_yn}
			</if>
			<if test="read_yn != null and read_yn != ''">
				and m.read_yn = #{read_yn}
			</if>
		</where>
		order by sent_at desc , read_yn desc
		<if test="page != null and page != '' and page != 0">
			limit #{cnt} offset #{offset}
		</if>
	</select>
	
	<select id="msgSendListTotalPage" parameterType="map">
		select ceil(count(*)*1.0/#{cnt}) as total from (
			select
			m.*,
			u.user_name as sender_name,
			u2.user_name as receiver_name
		from msg m
			join `user` u on m.sender_idx = u.user_idx
			join `user` u2 on m.receiver_idx = u2.user_idx
		<where>
			m.sender_del = false
			and m.sender_idx = #{user_idx}
			<if test="important_yn != null and important_yn !=''">
				and m.important_yn = #{important_yn}
			</if>
			<if test="read_yn != null and read_yn != ''">
				and m.read_yn = #{read_yn}
			</if>
		</where>
		order by sent_at desc , read_yn asc
		) as total
	</select>
	
	<select id="msgReceiveList" parameterType="map" resultType="map">
		select
			m.*,
			u.user_name as sender_name,
			u2.user_name as receiver_name
		from msg m
			join `user` u on m.sender_idx = u.user_idx
			join `user` u2 on m.receiver_idx = u2.user_idx
		<where>
			m.receiver_del = false
			and m.receiver_idx = #{user_idx}
			<if test="important_yn != null">
				and m.important_yn = #{important_yn}
			</if>
			<if test="read_yn != null">
				and m.read_yn = #{read_yn}
			</if>
		</where>
		order by read_yn asc, sent_at desc
		<if test="page != null and page != '' and page != 0">
			limit #{cnt} offset #{offset}
		</if>
	</select>
	
	<select id="msgReceiveListTotalPage" parameterType="map">
		select ceil(count(*)*1.0/#{cnt}) as total from (
			select
			m.*,
			u.user_name as sender_name,
			u2.user_name as receiver_name
		from msg m
			join `user` u on m.sender_idx = u.user_idx
			join `user` u2 on m.receiver_idx = u2.user_idx
		<where>
			m.receiver_del = false
			and m.receiver_idx = #{user_idx}
			<if test="important_yn != null">
				and m.important_yn = #{important_yn}
			</if>
			<if test="read_yn != null">
				and m.read_yn = #{read_yn}
			</if>
		</where>
		order by read_yn asc, sent_at desc
		) as total
	</select>
	
	<insert id="msgInsert" parameterType="kr.co.junko.dto.MsgDTO">
		INSERT INTO msg (sender_idx, receiver_idx, msg_title, msg_content
		<if test="important_yn != null and important_yn != ''and important_yn != 0">
			,important_yn
		</if>
		) 
			VALUES (#{sender_idx}, #{receiver_idx}, #{msg_title}, #{msg_content}
			<if test="important_yn != null and important_yn != ''and important_yn != 0">
			,#{important_yn}
		</if>
			)
	</insert>
	
</mapper>