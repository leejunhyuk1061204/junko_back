<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.junko.chart.ChartDAO">

	<!-- 어제와 오늘 매출 -->
	<select id="getDaySales" resultType="map">
		SELECT
		    CURDATE() AS date, c.category_name, p.product_name
		    <!-- 금일 총 매출 -->
		    ,SUM(CASE WHEN DATE(s.payment_date) = CURDATE() THEN sp.product_price*sp.product_cnt 
		        ELSE 0 END) AS sales_today
		    <!-- 전일 총 매출 -->
		    ,SUM(CASE WHEN DATE(s.payment_date) = CURDATE() - INTERVAL 1 DAY
		        THEN sp.product_price*sp.product_cnt ELSE 0 END) AS sales_yesterday
		FROM sales s JOIN sales_product sp ON s.sales_idx = sp.sales_idx
		JOIN product p ON sp.product_idx = p.product_idx
		JOIN category c ON c.category_idx = p.category_idx
			<where>
				s.status IN ('결제 완료', '배송중', '배송완료')
				<!-- 전날이랑 오늘 데이터만 필터링 -->
		    	AND s.payment_date IN (CURDATE(), CURDATE() - INTERVAL 1 DAY)
		    	<if test="categoryIdx != null">
			        AND p.category_idx = #{categoryIdx}
			    </if>
			</where>
	</select>
	
	<!-- 일일 기준 주문건수와 취소건수 -->
	<select id="getRecentOrderStats" resultType="map">
		SELECT date, category_name, product_name, order_cnt, cancel_cnt
		FROM (
		    SELECT 
		        s.payment_date AS date
		        ,c.category_name
		        ,p.product_name
		        ,COUNT(CASE WHEN s.status IN ('결제 완료', '배송중', '배송완료') THEN 1 END) AS order_cnt
		        ,COUNT(CASE WHEN s.status = '결제취소' THEN 1 END) AS cancel_cnt
		    FROM sales s JOIN sales_product sp ON s.sales_idx = sp.sales_idx
		    JOIN product p ON sp.product_idx = p.product_idx
		    JOIN category c ON p.category_idx = c.category_idx
		    	<where>
		    		<if test="categoryIdx != null">
				        AND p.category_idx = #{categoryIdx}
				    </if>
				    <if test="startDate != null and endDate != null">
				        AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
				    </if>
		    	</where>
		    GROUP BY date, c.category_idx, p.product_name ORDER BY date DESC LIMIT 5) t ORDER BY date
	</select>
	
	<!-- 판매율 높은 상품 순 5개 -->
	<select id="getPopularProduct" resultType="map">
		SELECT sp.product_idx, c.category_name, p.product_name, SUM(sp.product_cnt) AS total_sales
		FROM sales_product sp JOIN sales s ON sp.sales_idx = s.sales_idx
		JOIN product p ON sp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
				s.status IN ('결제 완료', '배송중', '배송완료')
				<if test="categoryIdx != null">
				    AND p.category_idx = #{categoryIdx}
				</if>
				<if test="startDate != null and endDate != null">
				    AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
				</if>
			</where>
		GROUP BY sp.product_idx, c.category_idx ORDER BY total_sales DESC LIMIT 5
	</select>
	
	<!-- 반품율 높은 상품 순 5개 -->
	<select id="getHighReturnProduct" resultType="map">
		SELECT p.product_idx, c.category_name, p.product_name, SUM(rp.return_cnt) AS return_cnt
		FROM return_product rp JOIN product p ON rp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
				rp.del_yn = 0
				<if test="categoryIdx != null">
			        AND p.category_idx = #{categoryIdx}
			    </if>
			</where>
		GROUP BY p.product_idx, c.category_idx ORDER BY return_cnt DESC LIMIT 5
	</select>
	
	<!-- 재고 회전율 -->
	<select id="getInventoryTurnoverStats" resultType="map">
		SELECT c.category_name, p.product_name
		  	,IFNULL(SUM(sp.product_cnt), 0) AS total_sales, st.stock_cnt AS current_stock <!-- 최근 30일간 총 출고 수량 (없으면 0) -->
		  	<!-- 재고 수량이 0인 경우 0으로 처리하여 0으로 나누는 오류 방지 -->
		  	,ROUND(IFNULL(SUM(sp.product_cnt) / NULLIF(st.stock_cnt, 0), 0), 2) AS turnover_ratio
		  	,CASE 
			    WHEN st.stock_cnt = 0 THEN '품절'
			    WHEN SUM(sp.product_cnt) / NULLIF(st.stock_cnt, 0) <![CDATA[<]]> 0.2 THEN '과잉'
			    WHEN SUM(sp.product_cnt) / NULLIF(st.stock_cnt, 0) > 5 THEN '부족'
			    ELSE '적정' END AS stock_status
		FROM product p
		JOIN category c ON p.category_idx = c.category_idx
		JOIN stock st ON p.product_idx = st.product_idx
		LEFT JOIN sales_product sp ON p.product_idx = sp.product_idx
		<!-- 출고 이력에서 최근 30일 데이터만 조회 -->
		LEFT JOIN sales sl ON sp.sales_idx = sl.sales_idx AND sl.payment_date BETWEEN CURDATE() - INTERVAL 30 DAY AND CURDATE()
			<where>
				p.del_yn = 0
				<if test="categoryIdx != null">
			        AND p.category_idx = #{categoryIdx}
			    </if>
			</where>
		GROUP BY p.product_idx, c.category_idx
	</select>
	
	<!-- 반품률 분석 -->
	<select id="returnProduct" resultType="map">
		SELECT p.product_idx, c.category_name, p.product_name, SUM(rp.return_cnt) AS return_cnt
		FROM return_product rp JOIN product p ON rp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
				rp.del_yn = 0
				<if test="categoryIdx != null">
			        AND p.category_idx = #{categoryIdx}
			    </if>
			</where>
		GROUP BY p.product_idx, c.category_idx
	</select>
	
	<!-- 처리 지연 상품 -->
	<select id="getDelayedProduct" resultType="map">
		SELECT p.product_idx, c.category_name, p.product_name, s.status, s.payment_date
		    ,DATEDIFF(NOW(), s.payment_date) AS delay_days <!-- 날짜 간격 일 단위로 반환 -->
		FROM sales s JOIN sales_product sp ON s.sales_idx = sp.sales_idx
		JOIN product p ON sp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
			    s.status IN ('결제 완료', '배송중') <!-- 아직 처리 중 -->
			    AND DATEDIFF(NOW(), s.payment_date) >= 3 <!-- 3일 이상 -->
			    AND p.del_yn = 0
				<if test="categoryIdx != null">
		            AND p.category_idx = #{categoryIdx}
		        </if>
		        <if test="startDate != null and endDate != null">
		            AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
		        </if>
			</where>
		ORDER BY delay_days DESC
	</select>
	
	<!-- 기간별 주문 상태 분석 -->
	<select id="getOrderStatus" resultType="map">
		SELECT 
		    DATE(s.payment_date) AS date,
		    COUNT(CASE WHEN s.status IN ('결제 대기', '결제 완료') THEN 1 END) AS complete,
		    COUNT(CASE WHEN s.status = '배송중' THEN 1 END) AS shipping,
		    COUNT(CASE WHEN s.status = '배송완료' THEN 1 END) AS shipped,
		    COUNT(CASE WHEN s.status = '결제취소' THEN 1 END) AS cancelled
		FROM sales s
		WHERE DATE(s.payment_date) BETWEEN '2025-07-01' AND '2025-07-31'
		GROUP BY DATE(s.payment_date)
		ORDER BY date
	</select>
	
	<!-- 마진율 계산 -->
	<select id="getProductMarginStats" resultType="map">
		SELECT c.category_name, p.product_name
		    ,SUM(sp.product_price * sp.product_cnt) AS total_sales <!-- 총 매출액 -->
		    ,SUM(p.purchase_price * sp.product_cnt) AS total_cost <!-- 총 매입원가 -->
		    ,ROUND( <!-- 마진율 = (매출-원가) / 매출*100, 소수점 없이 정수로 반올림 -->
		        (SUM(sp.product_price * sp.product_cnt) - SUM(p.purchase_price * sp.product_cnt)) 
		        / SUM(sp.product_price * sp.product_cnt) * 100, 0) AS margin_rate
		FROM sales_product sp
		JOIN sales s ON sp.sales_idx = s.sales_idx
		JOIN product p ON sp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
				s.status IN ('결제 완료', '배송중', '배송완료')
				<if test="categoryIdx != null">
					AND p.category_idx = #{categoryIdx}
				</if>
				<if test="startDate != null and endDate != null">
					AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
				</if>
			</where>
		GROUP BY c.category_name, p.product_name
	</select>
	
	<!-- 순이익률 계산 -->
	<select id="getNetProfitStats" resultType="map">
		SELECT c.category_name, p.product_name
		    ,SUM(sp.product_price * sp.product_cnt) AS total_sales <!-- 총매출 = 판매가*수량 -->
		    ,SUM(p.purchase_price * sp.product_cnt) AS total_cost <!-- 총원가 = 매입가*수량 -->
		    ,SUM(sp.product_price * sp.product_cnt) - SUM(p.purchase_price * sp.product_cnt) AS net_profit <!-- 순이익 = 매출-원가 -->
		    ,ROUND( <!-- 순이익률 = 순이익 / 매출*100, 소수점 1자리 반올림 -->
		        (SUM(sp.product_price * sp.product_cnt) - SUM(p.purchase_price * sp.product_cnt))
		        / SUM(sp.product_price * sp.product_cnt) * 100, 1) AS net_profit_margin
		FROM sales_product sp
		JOIN sales s ON sp.sales_idx = s.sales_idx
		JOIN product p ON sp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
				s.status IN ('결제 완료', '배송중', '배송완료')
				<if test="categoryIdx != null">
					AND p.category_idx = #{categoryIdx}
				</if>
				<if test="startDate != null and endDate != null">
					AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
				</if>
			</where>
		GROUP BY c.category_name, p.product_name
	</select>
	
	<!-- 입출고 현황 -->
	<select id="getInOutProduct" resultType="map">
		SELECT p.product_idx, c.category_name, p.product_name
		    <!-- 입고 수량 -->
		    ,(SELECT SUM(rp.receive_cnt) FROM receive_product rp JOIN receive r ON rp.receive_idx = r.receive_idx
		    WHERE rp.product_idx = p.product_idx AND r.del_yn = 0 AND rp.del_yn = 0
			    <if test="startDate != null and endDate != null">
			    	AND DATE(r.receive_date) BETWEEN #{startDate} AND #{endDate}
			    </if>
		    ) AS total_receive_cnt,
		    <!-- 출고 수량 -->
		    (SELECT SUM(sp.product_cnt) FROM sales_product sp JOIN sales s ON sp.sales_idx = s.sales_idx
		    JOIN shipment smt ON smt.sales_idx = s.sales_idx
		    WHERE sp.product_idx = p.product_idx
			    AND smt.del_yn = 0
			    AND s.status IN ('결제 완료', '배송중', '배송완료')
			        <if test="startDate != null and endDate != null">
			        	AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
			        </if>
		    ) AS total_shipment_cnt
		FROM product p JOIN category c ON p.category_idx = c.category_idx
			<where>
				p.del_yn = 0
				<if test="categoryIdx != null">
					AND p.category_idx = #{categoryIdx}
				</if>
			</where>
		ORDER BY p.product_idx
	</select>

	<!-- 전년도 대비 월별 매출 비교 -->
	<select id="getMonthlySalesYoY" resultType="map">
		SELECT c.category_name
			,DATE_FORMAT(s.payment_date, '%Y-%m') AS month
			<!-- 전년도 매출 -->
			,SUM(CASE WHEN YEAR(s.payment_date)=YEAR(CURDATE())-1
				THEN sp.product_price*sp.product_cnt ELSE 0 END) AS sales_last_year
			<!-- 이번년도 매출 -->
			,SUM(CASE WHEN YEAR(s.payment_date)=YEAR(CURDATE())
        		THEN sp.product_price*sp.product_cnt ELSE 0 END) AS sales_this_year
		FROM sales s JOIN sales_product sp ON s.sales_idx=sp.sales_idx
		JOIN product p ON sp.product_idx = p.product_idx
		JOIN category c ON p.category_idx = c.category_idx
			<where>
				s.status IN ('결제 완료','배송중','배송완료')
				<!-- 올해하고 작년 데이터만 -->
				AND YEAR(s.payment_date) IN (YEAR(CURDATE()), YEAR(CURDATE())-1)
				<if test="categoryIdx != null">
			        AND p.category_idx = #{categoryIdx}
			    </if>
			    <if test="startDate != null and endDate != null">
			        AND DATE(s.payment_date) BETWEEN #{startDate} AND #{endDate}
			    </if>
			</where>
		GROUP BY DATE_FORMAT(s.payment_date, '%Y-%m') ORDER BY month
	</select>

</mapper>